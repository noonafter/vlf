//
// Created by noisemonitor on 2024/12/16.
//

// You may need to build the project (run Qt uic code generator) to get "ui_VLFChannel.h" resolved

#include "vlfchannel.h"
#include <QDebug>
#include <QThread>
#include <QtEndian>
#include <QDataStream>
#include <QCoreApplication>
#include <QDir>


// 256个业务包数据，如果sample是rint32，可以存65536个sample
#define RAWDATA_BUF_SIZE (256*1024) // 262144

VLFChannel::VLFChannel(QObject *parent) : QObject(parent), rawdata_writer(RAWDATA_BUF_SIZE) {
    m_queue = ReaderWriterQueue<QByteArray>(512);
    ch_info.open_state = true;
    last_channel_params = QByteArray(16, '\0');
    last_udp_idx = 0;
    recv_count = 0;
    rawdata_buf.reserve(RAWDATA_BUF_SIZE);
    app_dir = QCoreApplication::applicationDirPath();
    current_datetime = QDateTime();
    last_datetime = QDateTime();
    start_datetime = QDateTime::currentDateTime().addDays(-1);
    repeat_day = 1;
    repeat_hour = 0;
    repeat_minute = 0;
    record_time = QTime(23,59,59,999);
    rawdata_file_name = "";

    num_ch_chlz0 = 8;
    filter_len_chlz0 = 64;
//    ch0 =  dsp.Channelizer(8,"NumTapsPerBand",64, "StopbandAttenuation", 45);
    float hh0[]{0, -4.4512624e-05, -8.5087144e-05, -0.00011494698, -0.00012857682, -0.00012269996, -9.6955999e-05, -5.4149172e-05, 0, 5.7590540e-05, 0.00010967477, 0.00014763048, 0.00016456371, 0.00015651746, 0.00012327955, 6.8636400e-05, 0, -7.2567345e-05, -0.00013780763, -0.00018499416, -0.00020566894, -0.00019511265, -0.00015329759, -8.5143693e-05, 0, 8.9606001e-05, 0.00016978943, 0.00022743834, 0.00025232963, 0.00023889294, 0.00018732472, 0.00010384288, 0, -0.00010888158, -0.00020594674, -0.00027539377, -0.00030501655, -0.00028829763, -0.00022570057, -0.00012491962, 0, 0.00013058359, 0.00024663343, 0.00032932783, 0.00036424110, 0.00034380436, 0.00026879477, 0.00014857625, 0, -0.00015491909, -0.00029223663, -0.00038975233, -0.00043056402, -0.00040593761, -0.00031701376, -0.00017503549, 0, 0.00018211662, 0.00034318413, 0.00045723372, 0.00050460669, 0.00047527932, 0.00037080917, 0.00020454521, 0, -0.00021243122, -0.00039995418, -0.00053240609, -0.00058706588, -0.00055248296, -0.00043068887, -0.00023738461, 0, 0.00024615103, 0.00046308784, 0.00061598810, 0.00067873229, 0.00063829159, 0.00049723120, 0.00027387205, 0, -0.00028360580, -0.00053320528, -0.00070880470, -0.00078051543, -0.00073356082, -0.00057110348, -0.00031437559, 0, 0.00032517788, 0.00061102700, 0.00081181596, 0.00089347520, 0.00083929003, 0.00065308617, 0.00035932637, 0, -0.00037131688, -0.00069740147, -0.00092615461, -0.0010188645, -0.00095666223, -0.00074410508, -0.00040923673, 0, 0.00042255889, 0.00079334236, 0.0010531761, 0.0011581854, 0.0010870984, 0.00084527407, 0.00046472423, 0, -0.00047955243, -0.00090007816, -0.0011945262, -0.0013132648, -0.0012323302, -0.00095795293, -0.00052654417, 0, 0.00054309372, 0.0010191198, 0.0013522330, 0.0014863586, 0.0013944994, 0.0010838271, 0.00059563457, 0, -0.00061417528, -0.0011523546, -0.0015288349, -0.0016802952, -0.0015762976, -0.0012250185, -0.00067317864, 0, 0.00069405441, 0.0013021783, 0.0017275602, 0.0018986803, 0.0017811623, 0.0013842435, 0.00076069433, 0, -0.00078435108, -0.0014716842, -0.0019525877, -0.0021461912, -0.0020135636, -0.0015650417, -0.00086016464, 0, 0.00088719162, 0.0016649432, 0.0022094294, 0.0024290129, 0.0022794278, 0.0017721188, 0.00097423221, 0, -0.0010054252, -0.0018874244, -0.0025055115, -0.0027555025, -0.0025867848, -0.0020118693, -0.0011064993, 0, 0.0011429593, 0.0021466522, 0.0028510843, 0.0031372320, 0.0029467912, 0.0022932079, 0.0012620052, 0, -0.0013052992, -0.0024532673, -0.0032606968, -0.0035906911, -0.0033754068, -0.0026289381, -0.0014480170, 0, 0.0015004522, 0.0028228133, 0.0037556994, 0.0041401885, 0.0038962711, 0.0030381170, 0.0016754051, 0, -0.0017405197, -0.0032789095, -0.0043687127, -0.0048230765, -0.0045459205, -0.0035503756, -0.0019611763, 0, 0.0020446803, 0.0038592403, 0.0051521459, 0.0056997985, 0.0053839153, 0.0042143869, 0.0023334874, 0, -0.0024452168, -0.0046277936, -0.0061957981, -0.0068748901, -0.0065142694, -0.0051160106, -0.0028425290, 0, 0.0030009625, 0.0057025622, 0.0076672919, 0.0085459882, 0.0081362678, 0.0064220531, 0.0035872380, 0, -0.0038315649, -0.0073275557, -0.0099194311, -0.011136849, -0.010685623, -0.0085048126, -0.0047932998, 0, 0.0052232579, 0.010101942, 0.013842949, 0.015749604, 0.015332238, 0.012398741, 0.0071113864, 0, -0.0080730990, -0.015994798, -0.022521688, -0.026426036, -0.026650015, -0.022449082, -0.013505999, 0, 0.017379405, 0.037477862, 0.058777537, 0.079544164, 0.098003581, 0.11252777, 0.12180873, 0.12500000, 0.12180873, 0.11252777, 0.098003581, 0.079544164, 0.058777537, 0.037477862, 0.017379405, 0, -0.013505999, -0.022449082, -0.026650015, -0.026426036, -0.022521688, -0.015994798, -0.0080730990, 0, 0.0071113864, 0.012398741, 0.015332238, 0.015749604, 0.013842949, 0.010101942, 0.0052232579, 0, -0.0047932998, -0.0085048126, -0.010685623, -0.011136849, -0.0099194311, -0.0073275557, -0.0038315649, 0, 0.0035872380, 0.0064220531, 0.0081362678, 0.0085459882, 0.0076672919, 0.0057025622, 0.0030009625, 0, -0.0028425290, -0.0051160106, -0.0065142694, -0.0068748901, -0.0061957981, -0.0046277936, -0.0024452168, 0, 0.0023334874, 0.0042143869, 0.0053839153, 0.0056997985, 0.0051521459, 0.0038592403, 0.0020446803, 0, -0.0019611763, -0.0035503756, -0.0045459205, -0.0048230765, -0.0043687127, -0.0032789095, -0.0017405197, 0, 0.0016754051, 0.0030381170, 0.0038962711, 0.0041401885, 0.0037556994, 0.0028228133, 0.0015004522, 0, -0.0014480170, -0.0026289381, -0.0033754068, -0.0035906911, -0.0032606968, -0.0024532673, -0.0013052992, 0, 0.0012620052, 0.0022932079, 0.0029467912, 0.0031372320, 0.0028510843, 0.0021466522, 0.0011429593, 0, -0.0011064993, -0.0020118693, -0.0025867848, -0.0027555025, -0.0025055115, -0.0018874244, -0.0010054252, 0, 0.00097423221, 0.0017721188, 0.0022794278, 0.0024290129, 0.0022094294, 0.0016649432, 0.00088719162, 0, -0.00086016464, -0.0015650417, -0.0020135636, -0.0021461912, -0.0019525877, -0.0014716842, -0.00078435108, 0, 0.00076069433, 0.0013842435, 0.0017811623, 0.0018986803, 0.0017275602, 0.0013021783, 0.00069405441, 0, -0.00067317864, -0.0012250185, -0.0015762976, -0.0016802952, -0.0015288349, -0.0011523546, -0.00061417528, 0, 0.00059563457, 0.0010838271, 0.0013944994, 0.0014863586, 0.0013522330, 0.0010191198, 0.00054309372, 0, -0.00052654417, -0.00095795293, -0.0012323302, -0.0013132648, -0.0011945262, -0.00090007816, -0.00047955243, 0, 0.00046472423, 0.00084527407, 0.0010870984, 0.0011581854, 0.0010531761, 0.00079334236, 0.00042255889, 0, -0.00040923673, -0.00074410508, -0.00095666223, -0.0010188645, -0.00092615461, -0.00069740147, -0.00037131688, 0, 0.00035932637, 0.00065308617, 0.00083929003, 0.00089347520, 0.00081181596, 0.00061102700, 0.00032517788, 0, -0.00031437559, -0.00057110348, -0.00073356082, -0.00078051543, -0.00070880470, -0.00053320528, -0.00028360580, 0, 0.00027387205, 0.00049723120, 0.00063829159, 0.00067873229, 0.00061598810, 0.00046308784, 0.00024615103, 0, -0.00023738461, -0.00043068887, -0.00055248296, -0.00058706588, -0.00053240609, -0.00039995418, -0.00021243122, 0, 0.00020454521, 0.00037080917, 0.00047527932, 0.00050460669, 0.00045723372, 0.00034318413, 0.00018211662, 0, -0.00017503549, -0.00031701376, -0.00040593761, -0.00043056402, -0.00038975233, -0.00029223663, -0.00015491909, 0, 0.00014857625, 0.00026879477, 0.00034380436, 0.00036424110, 0.00032932783, 0.00024663343, 0.00013058359, 0, -0.00012491962, -0.00022570057, -0.00028829763, -0.00030501655, -0.00027539377, -0.00020594674, -0.00010888158, 0, 0.00010384288, 0.00018732472, 0.00023889294, 0.00025232963, 0.00022743834, 0.00016978943, 8.9606001e-05, 0, -8.5143693e-05, -0.00015329759, -0.00019511265, -0.00020566894, -0.00018499416, -0.00013780763, -7.2567345e-05, 0, 6.8636400e-05, 0.00012327955, 0.00015651746, 0.00016456371, 0.00014763048, 0.00010967477, 5.7590540e-05, 0, -5.4149172e-05, -9.6955999e-05, -0.00012269996, -0.00012857682, -0.00011494698, -8.5087144e-05, -4.4512624e-05};
    chlz0 = firpfbch_crcf_create(LIQUID_ANALYZER, num_ch_chlz0, filter_len_chlz0, hh0);
}

VLFChannel::VLFChannel(int idx) : rawdata_writer(RAWDATA_BUF_SIZE){
    ch_info.channel_id = idx;

    m_queue = ReaderWriterQueue<QByteArray>(512);
    ch_info.open_state = true;
    last_channel_params = QByteArray(16, '\0');
    last_udp_idx = 0;
    recv_count = 0;
    rawdata_buf.reserve(RAWDATA_BUF_SIZE); // capacity = 262,144B
    app_dir = QCoreApplication::applicationDirPath();
    current_datetime = QDateTime();
    last_datetime = QDateTime();
    start_datetime = QDateTime::currentDateTime().addDays(-1);
    repeat_day = 1;
    repeat_hour = 0;
    repeat_minute = 0;
    // 不能写QTime(24,0)
    record_time = QTime(23,59,59,999);
    rawdata_file_name = "";

    num_ch_chlz0 = 8;
    filter_len_chlz0 = 64;
//    ch0 =  dsp.Channelizer(8,"NumTapsPerBand",64, "StopbandAttenuation", 45);
    float hh0[]{0, -4.4512624e-05, -8.5087144e-05, -0.00011494698, -0.00012857682, -0.00012269996, -9.6955999e-05, -5.4149172e-05, 0, 5.7590540e-05, 0.00010967477, 0.00014763048, 0.00016456371, 0.00015651746, 0.00012327955, 6.8636400e-05, 0, -7.2567345e-05, -0.00013780763, -0.00018499416, -0.00020566894, -0.00019511265, -0.00015329759, -8.5143693e-05, 0, 8.9606001e-05, 0.00016978943, 0.00022743834, 0.00025232963, 0.00023889294, 0.00018732472, 0.00010384288, 0, -0.00010888158, -0.00020594674, -0.00027539377, -0.00030501655, -0.00028829763, -0.00022570057, -0.00012491962, 0, 0.00013058359, 0.00024663343, 0.00032932783, 0.00036424110, 0.00034380436, 0.00026879477, 0.00014857625, 0, -0.00015491909, -0.00029223663, -0.00038975233, -0.00043056402, -0.00040593761, -0.00031701376, -0.00017503549, 0, 0.00018211662, 0.00034318413, 0.00045723372, 0.00050460669, 0.00047527932, 0.00037080917, 0.00020454521, 0, -0.00021243122, -0.00039995418, -0.00053240609, -0.00058706588, -0.00055248296, -0.00043068887, -0.00023738461, 0, 0.00024615103, 0.00046308784, 0.00061598810, 0.00067873229, 0.00063829159, 0.00049723120, 0.00027387205, 0, -0.00028360580, -0.00053320528, -0.00070880470, -0.00078051543, -0.00073356082, -0.00057110348, -0.00031437559, 0, 0.00032517788, 0.00061102700, 0.00081181596, 0.00089347520, 0.00083929003, 0.00065308617, 0.00035932637, 0, -0.00037131688, -0.00069740147, -0.00092615461, -0.0010188645, -0.00095666223, -0.00074410508, -0.00040923673, 0, 0.00042255889, 0.00079334236, 0.0010531761, 0.0011581854, 0.0010870984, 0.00084527407, 0.00046472423, 0, -0.00047955243, -0.00090007816, -0.0011945262, -0.0013132648, -0.0012323302, -0.00095795293, -0.00052654417, 0, 0.00054309372, 0.0010191198, 0.0013522330, 0.0014863586, 0.0013944994, 0.0010838271, 0.00059563457, 0, -0.00061417528, -0.0011523546, -0.0015288349, -0.0016802952, -0.0015762976, -0.0012250185, -0.00067317864, 0, 0.00069405441, 0.0013021783, 0.0017275602, 0.0018986803, 0.0017811623, 0.0013842435, 0.00076069433, 0, -0.00078435108, -0.0014716842, -0.0019525877, -0.0021461912, -0.0020135636, -0.0015650417, -0.00086016464, 0, 0.00088719162, 0.0016649432, 0.0022094294, 0.0024290129, 0.0022794278, 0.0017721188, 0.00097423221, 0, -0.0010054252, -0.0018874244, -0.0025055115, -0.0027555025, -0.0025867848, -0.0020118693, -0.0011064993, 0, 0.0011429593, 0.0021466522, 0.0028510843, 0.0031372320, 0.0029467912, 0.0022932079, 0.0012620052, 0, -0.0013052992, -0.0024532673, -0.0032606968, -0.0035906911, -0.0033754068, -0.0026289381, -0.0014480170, 0, 0.0015004522, 0.0028228133, 0.0037556994, 0.0041401885, 0.0038962711, 0.0030381170, 0.0016754051, 0, -0.0017405197, -0.0032789095, -0.0043687127, -0.0048230765, -0.0045459205, -0.0035503756, -0.0019611763, 0, 0.0020446803, 0.0038592403, 0.0051521459, 0.0056997985, 0.0053839153, 0.0042143869, 0.0023334874, 0, -0.0024452168, -0.0046277936, -0.0061957981, -0.0068748901, -0.0065142694, -0.0051160106, -0.0028425290, 0, 0.0030009625, 0.0057025622, 0.0076672919, 0.0085459882, 0.0081362678, 0.0064220531, 0.0035872380, 0, -0.0038315649, -0.0073275557, -0.0099194311, -0.011136849, -0.010685623, -0.0085048126, -0.0047932998, 0, 0.0052232579, 0.010101942, 0.013842949, 0.015749604, 0.015332238, 0.012398741, 0.0071113864, 0, -0.0080730990, -0.015994798, -0.022521688, -0.026426036, -0.026650015, -0.022449082, -0.013505999, 0, 0.017379405, 0.037477862, 0.058777537, 0.079544164, 0.098003581, 0.11252777, 0.12180873, 0.12500000, 0.12180873, 0.11252777, 0.098003581, 0.079544164, 0.058777537, 0.037477862, 0.017379405, 0, -0.013505999, -0.022449082, -0.026650015, -0.026426036, -0.022521688, -0.015994798, -0.0080730990, 0, 0.0071113864, 0.012398741, 0.015332238, 0.015749604, 0.013842949, 0.010101942, 0.0052232579, 0, -0.0047932998, -0.0085048126, -0.010685623, -0.011136849, -0.0099194311, -0.0073275557, -0.0038315649, 0, 0.0035872380, 0.0064220531, 0.0081362678, 0.0085459882, 0.0076672919, 0.0057025622, 0.0030009625, 0, -0.0028425290, -0.0051160106, -0.0065142694, -0.0068748901, -0.0061957981, -0.0046277936, -0.0024452168, 0, 0.0023334874, 0.0042143869, 0.0053839153, 0.0056997985, 0.0051521459, 0.0038592403, 0.0020446803, 0, -0.0019611763, -0.0035503756, -0.0045459205, -0.0048230765, -0.0043687127, -0.0032789095, -0.0017405197, 0, 0.0016754051, 0.0030381170, 0.0038962711, 0.0041401885, 0.0037556994, 0.0028228133, 0.0015004522, 0, -0.0014480170, -0.0026289381, -0.0033754068, -0.0035906911, -0.0032606968, -0.0024532673, -0.0013052992, 0, 0.0012620052, 0.0022932079, 0.0029467912, 0.0031372320, 0.0028510843, 0.0021466522, 0.0011429593, 0, -0.0011064993, -0.0020118693, -0.0025867848, -0.0027555025, -0.0025055115, -0.0018874244, -0.0010054252, 0, 0.00097423221, 0.0017721188, 0.0022794278, 0.0024290129, 0.0022094294, 0.0016649432, 0.00088719162, 0, -0.00086016464, -0.0015650417, -0.0020135636, -0.0021461912, -0.0019525877, -0.0014716842, -0.00078435108, 0, 0.00076069433, 0.0013842435, 0.0017811623, 0.0018986803, 0.0017275602, 0.0013021783, 0.00069405441, 0, -0.00067317864, -0.0012250185, -0.0015762976, -0.0016802952, -0.0015288349, -0.0011523546, -0.00061417528, 0, 0.00059563457, 0.0010838271, 0.0013944994, 0.0014863586, 0.0013522330, 0.0010191198, 0.00054309372, 0, -0.00052654417, -0.00095795293, -0.0012323302, -0.0013132648, -0.0011945262, -0.00090007816, -0.00047955243, 0, 0.00046472423, 0.00084527407, 0.0010870984, 0.0011581854, 0.0010531761, 0.00079334236, 0.00042255889, 0, -0.00040923673, -0.00074410508, -0.00095666223, -0.0010188645, -0.00092615461, -0.00069740147, -0.00037131688, 0, 0.00035932637, 0.00065308617, 0.00083929003, 0.00089347520, 0.00081181596, 0.00061102700, 0.00032517788, 0, -0.00031437559, -0.00057110348, -0.00073356082, -0.00078051543, -0.00070880470, -0.00053320528, -0.00028360580, 0, 0.00027387205, 0.00049723120, 0.00063829159, 0.00067873229, 0.00061598810, 0.00046308784, 0.00024615103, 0, -0.00023738461, -0.00043068887, -0.00055248296, -0.00058706588, -0.00053240609, -0.00039995418, -0.00021243122, 0, 0.00020454521, 0.00037080917, 0.00047527932, 0.00050460669, 0.00045723372, 0.00034318413, 0.00018211662, 0, -0.00017503549, -0.00031701376, -0.00040593761, -0.00043056402, -0.00038975233, -0.00029223663, -0.00015491909, 0, 0.00014857625, 0.00026879477, 0.00034380436, 0.00036424110, 0.00032932783, 0.00024663343, 0.00013058359, 0, -0.00012491962, -0.00022570057, -0.00028829763, -0.00030501655, -0.00027539377, -0.00020594674, -0.00010888158, 0, 0.00010384288, 0.00018732472, 0.00023889294, 0.00025232963, 0.00022743834, 0.00016978943, 8.9606001e-05, 0, -8.5143693e-05, -0.00015329759, -0.00019511265, -0.00020566894, -0.00018499416, -0.00013780763, -7.2567345e-05, 0, 6.8636400e-05, 0.00012327955, 0.00015651746, 0.00016456371, 0.00014763048, 0.00010967477, 5.7590540e-05, 0, -5.4149172e-05, -9.6955999e-05, -0.00012269996, -0.00012857682, -0.00011494698, -8.5087144e-05, -4.4512624e-05};
    chlz0 = firpfbch_crcf_create(LIQUID_ANALYZER, num_ch_chlz0, filter_len_chlz0, hh0);
}

VLFChannel::~VLFChannel() {

    qDebug() << "id is " << QThread::currentThreadId();
    if(this)
    {
        qDebug() << "has " << this;
    }else{
        qDebug() << "this null ";
    }

}

bool VLFChannel::package_enqueue(const QByteArray &package) {
    return m_queue.try_enqueue(package);
}

void VLFChannel::slot_device_info_update(VLFDeviceConfig d_config) {

    d_info = d_config;

}

void VLFChannel::slot_channel_info_update(VLFChannelConfig ch_config) {

    ch_info = ch_config;
    last_udp_idx = 0;
    QDataStream out(&last_channel_params,QIODevice::WriteOnly);
    out << ch_info.channel_id
        << ch_info.data_type
        << ch_info.save_type
        << ch_info.sample_rate
        << ch_info.freq_lower_edge
        << ch_info.freq_upper_edge;
}



void VLFChannel::slot_business_package_enqueued() {

    QByteArray package;
    if(!m_queue.try_dequeue(package)){
        return;
    }

    if (!ch_info.open_state || package.size() < 1076) {
        return;
    }

    // 收到业务包后，如果是第一次收到，初始化通道参数；如果不是第一次收到，检查参数与本地是否一致
    // 这个逻辑不对，应该是直接与本地参数进行比较，不一致直接丢弃，不存在下位机改变上位机参数
    if(last_channel_params != package.mid(32,16)){
        return;
    }

    uint32_t cnt_udp_idx = qToBigEndian(*reinterpret_cast<const uint32_t *>((package.mid(0, 4).constData())));
    // 如果udp包号小于上一次的号且号码邻近，说明这一包晚到了，直接丢掉
    if (cnt_udp_idx <= last_udp_idx && last_udp_idx - cnt_udp_idx < 1<<20) {
        return;
    }
    last_udp_idx = cnt_udp_idx;

    // 第一级Buffer为原始样本的缓存，大小为1024字节的整数倍。用来去掉协议头，并用于Rawdata文件的存储
    // QArrayData包括header+实际数据，没有比较好的方法，只去掉头不进行复制的。当然可以用constData返回const char*，考虑用右值引用来移动数据


    // 处理业务包头

    // 根据包提供的时间，设置current_datetime
    QDate cnt_date(d_info.year_month_day/10000,(d_info.year_month_day/100)%100,d_info.year_month_day%100);
    QTime cnt_time(package.at(26), package.at(25), package.at(24), package.mid(20,4).toUInt());
    current_datetime.setDate(cnt_date);
    current_datetime.setTime(cnt_time);

    // 根据包内信息，获取文件夹路径
    QString ch_id_s = QString::number(ch_info.channel_id);
    QString rawdata_dir_path = app_dir + "/rawdata/ch" + ch_id_s + "/" + cnt_date.toString("yyyyMMdd");

    rawdata_writer.setDir(rawdata_dir_path);
    // 由于有多个线程都要写，这里设置整个文件的路径，可能会有问题，后面写就用绝对路径
//    QDir::setCurrent(rawdata_dir_path);

    // 根据包内信息，获取文件名（绝对路径）
    QString data_type_s = ch_info.data_type ? "R" : "C";
    QString save_type_s = ch_info.save_type ? "I32" : "I16";
    QString fsa_s = QString::number(ch_info.sample_rate);
    QStringList rfn_list;    // RAW_CH0_192000_RI32_BE_20241226_101930
    rfn_list << "RAW" << "CH"+ch_id_s << fsa_s << data_type_s + save_type_s << "BE" << "";
    // 更新last_datetime&文件绝对路径
    if (!last_datetime.isValid()) {
        last_datetime = current_datetime;
        roundSeconds(last_datetime);
        rfn_list.replace(5, last_datetime.toString("yyyyMMdd_hhmmss"));
        rawdata_file_name = rfn_list.join("_");
    }

    if (last_datetime.msecsTo(current_datetime) > (10000 - 50)) {
        last_datetime = last_datetime.addSecs(10);
        rfn_list.replace(5, last_datetime.toString("yyyyMMdd_hhmmss"));
        rawdata_file_name = rfn_list.join("_");
    }

//    // 如果文件名改变，重新打开文件
    rawdata_writer.setFile(rawdata_file_name);


    // (current-start) % repeat < record, 则当前包加入缓存，这里其实只输入了current_datetime，这里决定是否写入
    int64_t elapsed_ms = start_datetime.msecsTo(current_datetime);
    int64_t repeat_ms = (repeat_day * 24 * 3600 + repeat_hour * 3600 + repeat_minute * 60) * 1000;
    int64_t record_ms = (record_time.hour() * 3600 + record_time.minute() * 60 + record_time.second()) * 1000;

    // 处理业务包数据
    // 在记录时间内，进行记录。记录和监测分开，rawdata_writer用来记录，rawdata_buf用于后续监测。
    QByteArray pack_data(package.constData() + 52, 1024);
    if (elapsed_ms % repeat_ms < record_ms) {
        rawdata_writer.write(pack_data);
    }else{ // 超出记录时间，写入已有数据，清空buf
        qDebug() << "not in record time, record stop";
    }

    // 进行监测，是否需要进行缓存？？？一包1024字节，如果是rint32，就是256个sample，
    // 如果用处理流的这种思路，将重要的数据节点（比如需要缓存，数据格式转换，处理的地方）封装成一个类，
    // 对于这个节点类来说，应该有初始化，决定内部数据存储格式
//    if (rawdata_buf.size() < RAWDATA_BUF_SIZE) {
//        rawdata_buf.append(package.constData() + 52, 1024);
//    } else {
//        qDebug() << "rawdata_buf full, process once";
//
//        // 转成float32，
//
//
//        rawdata_buf.resize(0);
//    }

    // 尝试不缓存，收到1包1024字节，256sample即进行处理
    // 1. 将数据转为complex<float>
    std::complex<float> chlz0_in[256];
    std::complex<float> chlz0_out[256/num_ch_chlz0][num_ch_chlz0];
    for(int i = 0; i < 256; i++){
        int32_t tmp = qToBigEndian(*reinterpret_cast<const int32_t *>((pack_data.mid(4*i,4).constData())));
        chlz0_in[i] = (float)(tmp * 1.0 / 536870912.0);
    }

    // 2. 经过第一级channelizer，256sample分成8个通道，每个通道32个点（只有0，1，2号通道需要进一步处理）
    for(int i = 0; i < 256/num_ch_chlz0; i++){
        firpfbch_crcf_analyzer_execute(chlz0, chlz0_in+i*num_ch_chlz0, chlz0_out[i]);
    }

    // 3. 经过第二级channelizer（共3个分别处理0，1，2号输出），但是每个通道需要80个点才能进行一次处理，第一级每次只给了32个点



    recv_count++;
    if(!(recv_count%5000)){
        qDebug() << "recv_count:" << recv_count;
    }

}

void VLFChannel::roundSeconds(QDateTime &dateTime) {
    int seconds = dateTime.time().second();
    int rseconds = qRound(seconds / 10.0) * 10;
    if (rseconds == 60)
        rseconds = 0;

    dateTime.setTime(QTime(dateTime.time().hour(),dateTime.time().minute(),rseconds));
}




